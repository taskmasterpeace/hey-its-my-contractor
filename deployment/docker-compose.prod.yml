version: '3.8'

services:
  # Production PostgreSQL with backup
  postgres:
    image: postgres:15-alpine
    container_name: contractor-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: contractor_platform
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - contractor-prod-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for production caching
  redis:
    image: redis:7-alpine
    container_name: contractor-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
    networks:
      - contractor-prod-network

  # Ory Kratos production setup
  kratos-migrate:
    image: oryd/kratos:v1.0.0
    container_name: contractor-kratos-migrate-prod
    environment:
      - DSN=postgres://${DB_USER}:${DB_PASSWORD}@postgres:5432/contractor_platform?sslmode=require
    volumes:
      - ./auth/kratos-prod.yml:/etc/config/kratos/kratos.yml:ro
      - ./auth/identity.schema.json:/etc/config/kratos/identity.schema.json:ro
    command: -c /etc/config/kratos/kratos.yml migrate sql -e --yes
    restart: on-failure
    networks:
      - contractor-prod-network
    depends_on:
      postgres:
        condition: service_healthy

  kratos:
    image: oryd/kratos:v1.0.0
    container_name: contractor-kratos-prod
    restart: unless-stopped
    environment:
      - DSN=postgres://${DB_USER}:${DB_PASSWORD}@postgres:5432/contractor_platform?sslmode=require
      - LOG_LEVEL=info
    command: serve -c /etc/config/kratos/kratos.yml
    volumes:
      - ./auth/kratos-prod.yml:/etc/config/kratos/kratos.yml:ro
      - ./auth/identity.schema.json:/etc/config/kratos/identity.schema.json:ro
    networks:
      - contractor-prod-network
    depends_on:
      kratos-migrate:
        condition: service_completed_successfully
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kratos.rule=Host(`auth.${DOMAIN}`)"
      - "traefik.http.routers.kratos.tls.certresolver=letsencrypt"

  # Production file upload service
  tusd:
    image: tusproject/tusd:v1.13.0
    container_name: contractor-tusd-prod
    restart: unless-stopped
    command: 
      - "-host=0.0.0.0"
      - "-port=1080"
      - "-upload-dir=/srv/tusd-data/files"
      - "-hooks-dir=/srv/tusd-data/hooks"
      - "-s3-bucket=${S3_BUCKET}"
      - "-s3-endpoint=${S3_ENDPOINT}"
    environment:
      - AWS_ACCESS_KEY_ID=${S3_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${S3_SECRET_KEY}
      - AWS_REGION=${S3_REGION}
    volumes:
      - tusd_prod_data:/srv/tusd-data
    networks:
      - contractor-prod-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.uploads.rule=Host(`uploads.${DOMAIN}`)"
      - "traefik.http.routers.uploads.tls.certresolver=letsencrypt"

  # Rocket.Chat production
  rocketchat-mongo:
    image: mongo:6.0
    container_name: contractor-rocketchat-mongo-prod
    restart: unless-stopped
    volumes:
      - rocketchat_mongo_prod_data:/data/db
    command: mongod --smallfiles --oplogSize 128 --replSet rs0 --storageEngine=wiredTiger
    networks:
      - contractor-prod-network

  rocketchat:
    image: rocketchat/rocket.chat:6.6.0
    container_name: contractor-rocketchat-prod
    restart: unless-stopped
    environment:
      - MONGO_URL=mongodb://rocketchat-mongo:27017/rocketchat?replSet=rs0
      - MONGO_OPLOG_URL=mongodb://rocketchat-mongo:27017/local?replSet=rs0
      - ROOT_URL=https://chat.${DOMAIN}
      - PORT=3000
      - MAIL_URL=${MAIL_URL}
      - ADMIN_USERNAME=${ROCKETCHAT_ADMIN_USER}
      - ADMIN_PASS=${ROCKETCHAT_ADMIN_PASS}
      - ADMIN_EMAIL=${ROCKETCHAT_ADMIN_EMAIL}
    volumes:
      - rocketchat_prod_uploads:/app/uploads
    networks:
      - contractor-prod-network
    depends_on:
      - rocketchat-mongo
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.chat.rule=Host(`chat.${DOMAIN}`)"
      - "traefik.http.routers.chat.tls.certresolver=letsencrypt"

  # Traefik reverse proxy for SSL termination
  traefik:
    image: traefik:v3.0
    container_name: contractor-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--global.checknewversion=false"
      - "--global.sendanonymoususage=false"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - contractor-prod-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"

  # Monitoring with Prometheus and Grafana
  prometheus:
    image: prom/prometheus:latest
    container_name: contractor-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - contractor-prod-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`metrics.${DOMAIN}`)"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"

  grafana:
    image: grafana/grafana:latest
    container_name: contractor-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SERVER_ROOT_URL=https://dashboard.${DOMAIN}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - contractor-prod-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`dashboard.${DOMAIN}`)"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"

  # Automated backups
  db-backup:
    image: postgres:15-alpine
    container_name: contractor-db-backup
    restart: unless-stopped
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: ["sh", "-c", "while true; do /backup.sh; sleep 86400; done"]
    networks:
      - contractor-prod-network
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_prod_data:
  redis_prod_data:
  tusd_prod_data:
  rocketchat_mongo_prod_data:
  rocketchat_prod_uploads:
  traefik_letsencrypt:
  prometheus_data:
  grafana_data:

networks:
  contractor-prod-network:
    driver: bridge